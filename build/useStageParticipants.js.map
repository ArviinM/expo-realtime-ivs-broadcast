{"version":3,"file":"useStageParticipants.js","sourceRoot":"","sources":["../src/useStageParticipants.ts"],"names":[],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport {\n  addOnParticipantJoinedListener,\n  addOnParticipantLeftListener,\n  addOnParticipantStreamsAddedListener,\n  addOnParticipantStreamsRemovedListener,\n} from './index';\nimport type {\n  Participant,\n  ParticipantPayload,\n  ParticipantStreamsPayload,\n  ParticipantStreamsRemovedPayload,\n} from './ExpoRealtimeIvsBroadcast.types';\n\nexport const useStageParticipants = () => {\n  const [participants, setParticipants] = useState<Participant[]>([]);\n\n  useEffect(() => {\n    const onParticipantJoined = (p: ParticipantPayload) => {\n      setParticipants((prev) => [\n        ...prev,\n        { id: p.participantId, streams: [] },\n      ]);\n    };\n\n    const onParticipantLeft = (p: ParticipantPayload) => {\n      setParticipants((prev) => prev.filter((participant) => participant.id !== p.participantId));\n    };\n\n    const onParticipantStreamsAdded = (p: ParticipantStreamsPayload) => {\n      setParticipants((prev) =>\n        prev.map((participant) => {\n          if (participant.id === p.participantId) {\n            // Avoid adding duplicate streams\n            const existingUrns = new Set(participant.streams.map(s => s.deviceUrn));\n            const newStreams = p.streams.filter(s => !existingUrns.has(s.deviceUrn));\n            return {\n              ...participant,\n              streams: [...participant.streams, ...newStreams],\n            };\n          }\n          return participant;\n        })\n      );\n    };\n\n    const onParticipantStreamsRemoved = (p: ParticipantStreamsRemovedPayload) => {\n      const removedUrns = new Set(p.streams.map((s) => s.deviceUrn));\n      setParticipants((prev) =>\n        prev.map((participant) => {\n          if (participant.id === p.participantId) {\n            return {\n              ...participant,\n              streams: participant.streams.filter(\n                (stream) => !removedUrns.has(stream.deviceUrn)\n              ),\n            };\n          }\n          return participant;\n        })\n      );\n    };\n\n    const subscriptions = [\n      addOnParticipantJoinedListener(onParticipantJoined),\n      addOnParticipantLeftListener(onParticipantLeft),\n      addOnParticipantStreamsAddedListener(onParticipantStreamsAdded),\n      addOnParticipantStreamsRemovedListener(onParticipantStreamsRemoved),\n    ];\n\n    return () => {\n      subscriptions.forEach((sub) => sub.remove());\n    };\n  }, []);\n\n  return { participants };\n}; "]}