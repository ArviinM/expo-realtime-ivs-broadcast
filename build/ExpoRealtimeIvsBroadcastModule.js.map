{"version":3,"file":"ExpoRealtimeIvsBroadcastModule.js","sourceRoot":"","sources":["../src/ExpoRealtimeIvsBroadcastModule.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAqB,MAAM,mBAAmB,CAAC;AAuB3E,MAAM,UAAU,GAAuC,mBAAmB,CAAC,0BAA0B,CAAC,CAAC;AAEvG,eAAe,UAAU,CAAC","sourcesContent":["import { requireNativeModule, EventSubscription } from 'expo-modules-core';\nimport { LocalAudioConfig, LocalVideoConfig, PermissionStatusMap, ExpoRealtimeIvsBroadcastModuleEvents } from './ExpoRealtimeIvsBroadcast.types';\n\n// This combines the module's method signatures with the event emitter's signatures.\n// By defining `addListener` and `removeListeners` explicitly, we get strong type-checking\n// for our event names and payloads, resolving the 'never' type error.\nexport type ExpoRealtimeIvsBroadcastModuleType = {\n  initializeStage(audioConfig?: LocalAudioConfig, videoConfig?: LocalVideoConfig): Promise<void>;\n  initializeLocalStreams(audioConfig?: LocalAudioConfig, videoConfig?: LocalVideoConfig): Promise<void>;\n  joinStage(token: string, options?: { targetParticipantId?: string }): Promise<void>;\n  leaveStage(): Promise<void>;\n  setStreamsPublished(published: boolean): Promise<void>;\n  swapCamera(): Promise<void>;\n  setMicrophoneMuted(muted: boolean): Promise<void>;\n  requestPermissions(): Promise<PermissionStatusMap>;\n\n  addListener<EventName extends keyof ExpoRealtimeIvsBroadcastModuleEvents>(\n    eventName: EventName,\n    listener: (event: Parameters<ExpoRealtimeIvsBroadcastModuleEvents[EventName]>[0]) => void\n  ): EventSubscription;\n  removeListeners(count: number): void;\n};\n\nconst ExpoModule: ExpoRealtimeIvsBroadcastModuleType = requireNativeModule('ExpoRealtimeIvsBroadcast');\n\nexport default ExpoModule;\n"]}