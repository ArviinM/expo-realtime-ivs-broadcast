{"version":3,"file":"ExpoRealtimeIvsBroadcast.types.js","sourceRoot":"","sources":["../src/ExpoRealtimeIvsBroadcast.types.ts"],"names":[],"mappings":"","sourcesContent":["import type { StyleProp, ViewStyle } from 'react-native';\n\n// Configuration types for the initialize method\nexport interface LocalAudioConfig {\n  // Future properties: e.g., bitrate?: number;\n}\n\nexport interface LocalVideoConfig {\n  // Future properties: e.g., width?: number; height?: number; targetFramerate?: number; maxBitrate?: number;\n}\n\n// Permission status types for requestPermissions method\nexport type PermissionStatus = 'granted' | 'denied' | 'not-determined' | 'unavailable';\nexport interface PermissionStatusMap {\n  camera: PermissionStatus;\n  microphone: PermissionStatus;\n}\n\n// --- Event Payloads for Native Module Emitter ---\nexport interface StageConnectionStatePayload {\n  state: 'connecting' | 'connected' | 'disconnected';\n  error?: string;\n}\n\nexport interface PublishStatePayload {\n  state: 'not_published' | 'attempting' | 'published' | 'failed'; // Added 'failed' as a common case\n  error?: string;\n}\n\nexport interface StageErrorPayload {\n  code: number;\n  description: string;\n  source: string;\n  isFatal: boolean;\n}\n\nexport interface CameraSwappedPayload {\n  newCameraURN: string;\n  newCameraName: string;\n}\n\nexport interface CameraSwapErrorPayload {\n  reason: string;\n}\n\n// As per plan\nexport interface StageStream {\n  deviceUrn: string;\n  mediaType: 'video' | 'audio' | 'unknown';\n}\n\nexport interface Participant {\n  id: string;\n  streams: StageStream[];\n}\n\n// Payloads for participant events\nexport interface ParticipantPayload {\n  participantId: string;\n}\n\nexport interface ParticipantStreamsPayload {\n  participantId: string;\n  streams: StageStream[];\n}\n\nexport interface ParticipantStreamsRemovedPayload {\n  participantId: string;\n  // On removal, we only get the URNs back from the native side\n  streams: { deviceUrn: string }[];\n}\n\n// Defines the events that the native module can emit\nexport type ExpoRealtimeIvsBroadcastModuleEvents = {\n  onStageConnectionStateChanged: (payload: StageConnectionStatePayload) => void;\n  onPublishStateChanged: (payload: PublishStatePayload) => void;\n  onStageError: (payload: StageErrorPayload) => void;\n  onParticipantJoined: (payload: ParticipantPayload) => void;\n  onParticipantLeft: (payload: ParticipantPayload) => void;\n  onParticipantStreamsAdded: (payload: ParticipantStreamsPayload) => void;\n  onParticipantStreamsRemoved: (payload: ParticipantStreamsRemovedPayload) => void;\n  onCameraSwapped: (payload: CameraSwappedPayload) => void;\n  onCameraSwapError: (payload: CameraSwapErrorPayload) => void;\n};\n\n// Props for the ExpoIVSStagePreviewView component\nexport type ExpoIVSStagePreviewViewProps = {\n  style?: StyleProp<ViewStyle>;\n  mirror?: boolean;\n  scaleMode?: 'fit' | 'fill'; // As per plan\n};\n\n// Props for the new remote stream view\nexport type ExpoIVSRemoteStreamViewProps = {\n  style?: StyleProp<ViewStyle>;\n  participantId?: string;\n  deviceUrn?: string;\n  scaleMode?: 'fit' | 'fill';\n};\n"]}